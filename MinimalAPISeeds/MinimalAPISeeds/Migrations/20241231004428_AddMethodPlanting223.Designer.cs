// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalAPISeeds;

#nullable disable

namespace MinimalAPISeeds.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241231004428_AddMethodPlanting223")]
    partial class AddMethodPlanting223
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxHarvestDays")
                        .HasColumnType("int");

                    b.Property<int>("MinHarvestDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantingDates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spacing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Varieties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterRequirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("CropPlantingMethod", b =>
                {
                    b.Property<int>("CropsId")
                        .HasColumnType("int");

                    b.Property<int>("PlantingMethodsId")
                        .HasColumnType("int");

                    b.HasKey("CropsId", "PlantingMethodsId");

                    b.HasIndex("PlantingMethodsId");

                    b.ToTable("CropPlantingMethods", (string)null);
                });

            modelBuilder.Entity("CropSeason", b =>
                {
                    b.Property<int>("CropsId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonsId")
                        .HasColumnType("int");

                    b.HasKey("CropsId", "SeasonsId");

                    b.HasIndex("SeasonsId");

                    b.ToTable("CropSeasons", (string)null);
                });

            modelBuilder.Entity("MinimalAPISeeds.Entidades.PlantingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlantingMethods");
                });

            modelBuilder.Entity("MinimalAPISeeds.Entidades.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("CropPlantingMethod", b =>
                {
                    b.HasOne("Crop", null)
                        .WithMany()
                        .HasForeignKey("CropsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalAPISeeds.Entidades.PlantingMethod", null)
                        .WithMany()
                        .HasForeignKey("PlantingMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CropSeason", b =>
                {
                    b.HasOne("Crop", null)
                        .WithMany()
                        .HasForeignKey("CropsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalAPISeeds.Entidades.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
